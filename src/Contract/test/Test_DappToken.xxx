var DappToken = artifacts.require('./DappToken.sol');

contract('DappToken',(accounts) =>{
  var tokenInstance;
  it('initializes the contract with the correct values',()=>{
    return DappToken.deployed().then((instance)=>{
      tokenInstance = instance;
      return tokenInstance.name();
    }).then((name)=>{
      assert.equal(name,'AmirToken','true Name is AmirToken');
      return tokenInstance.symbol();
    }).then((symbol)=>{
      assert.equal(symbol,'AMT','true symbol is AMT');
    })
  });

  it('allocates the initial supply upon deployment', () => {
    return DappToken.deployed().then((instance)=>{
        tokenInstance = instance;
        return tokenInstance.totalSupply();
    }).then((totalSupply)=>{
        assert.equal(totalSupply,1000000,'total Supply is 1000000');
        return tokenInstance.balanceOf(accounts[0]);
    }).then((initialSupply)=>{
        assert.equal(initialSupply,1000000,'initial Supply is 1000000');
    })
  });

  it('transfers token ownership',()=>{
    return DappToken.deployed().then((instance)=>{
      tokenInstance = instance;
      return tokenInstance.transfer.call(accounts[1],2000000)
    }).then(assert.fail).catch((error)=>{
      assert(error.message.indexOf('revert')>=0,'Error message must contain revert')
      return tokenInstance.transfer.call(accounts[1],250000,{from : accounts[0]});
    }).then((success)=>{
      assert.equal(success,true,'It returns true');
      return tokenInstance.transfer(accounts[1],250000,{from : accounts[0]});
    }).then((receipt)=>{
      assert.equal(receipt.logs.length,1,'triggers one event');
      assert.equal(receipt.logs[0].event,'Transfer','Should be transferred');
      assert.equal(receipt.logs[0].args._from,accounts[0],'Sender');
      assert.equal(receipt.logs[0].args._to,accounts[1],'Receiver');
      assert.equal(receipt.logs[0].args._value,250000,'Sender');
      return tokenInstance.balanceOf(accounts[1]);
    }).then((balance)=>{
      assert.equal(balance.toNumber(),250000,'balance of receiver');
      return tokenInstance.balanceOf(accounts[0]);
    }).then((balance)=>{
      assert.equal(balance.toNumber(),750000,'balance of sender');
    });
  });

  it('approves tokens for delegated transfer',()=>{
    return DappToken.deployed().then((instance)=>{
      tokenInstance = instance;
      return tokenInstance.approve.call(accounts[1],100,{from: accounts[0]});
    }).then((success)=>{
      assert.equal(success,true,'it returns true');
      return tokenInstance.approve(accounts[1],100,{from: accounts[0]});
    }).then((receipt)=>{
      assert.equal(receipt.logs.length,1,'triggers one event');
      assert.equal(receipt.logs[0].event,'Approve','Approve');
      assert.equal(receipt.logs[0].args._owner,accounts[0],'owner');
      assert.equal(receipt.logs[0].args._spender,accounts[1],'spender');
      assert.equal(receipt.logs[0].args._value,100,'owner');

      return tokenInstance.allowance(accounts[0],accounts[1]);
    }).then((allowance)=>{
      assert.equal(allowance.toNumber(),100,'allowance is 100');
    })
  });

  it('handles delegated token transfer',()=>{
    return DappToken.deployed().then((instance)=>{
      tokenInstance = instance;
      fromAccount = accounts[2];
      toAccount = accounts[3];
      spendingAccount = accounts[4];
      return tokenInstance.transfer(fromAccount,100,{from: accounts[0]});
    }).then((receipt)=>{
      return tokenInstance.approve(spendingAccount,10,{from: fromAccount});
    }).then((receipt)=>{
      return tokenInstance.transferFrom(fromAccount,toAccount,9999,{from: spendingAccount})
    }).then(assert.fail).catch((error)=>{
      assert(error.message.indexOf('revert')>=0,'cannot send larger than balance');
      return tokenInstance.transferFrom(fromAccount,toAccount,20,{from: spendingAccount})
    }).then(assert.fail).catch((error)=>{
      assert(error.message.indexOf('revert')>=0,'cannot send larger than approved');
      return tokenInstance.transferFrom.call(fromAccount,toAccount,10,{from: spendingAccount});
    }).then((success)=>{
      assert.equal(success,true);
      return tokenInstance.transferFrom(fromAccount,toAccount,10,{from: spendingAccount});
    }).then((receipt)=>{
      assert.equal(receipt.logs.length,1,'triggers one event');
      assert.equal(receipt.logs[0].event,'Transfer','Transfer from');
      assert.equal(receipt.logs[0].args._from,fromAccount,'owner');
      assert.equal(receipt.logs[0].args._to,toAccount,'spender');
      assert.equal(receipt.logs[0].args._value,10,'owner');
    })
  })
});
